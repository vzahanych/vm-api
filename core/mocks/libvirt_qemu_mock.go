// Code generated by MockGen. DO NOT EDIT.
// Source: libvirt-qemu.go
//
// Generated by this command:
//
//	mockgen -source=libvirt-qemu.go -destination=mocks/libvirt_qemu_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	libvirt "libvirt.org/go/libvirt"
)

// MockLibvirtQemu is a mock of LibvirtQemu interface.
type MockLibvirtQemu struct {
	ctrl     *gomock.Controller
	recorder *MockLibvirtQemuMockRecorder
	isgomock struct{}
}

// MockLibvirtQemuMockRecorder is the mock recorder for MockLibvirtQemu.
type MockLibvirtQemuMockRecorder struct {
	mock *MockLibvirtQemu
}

// NewMockLibvirtQemu creates a new mock instance.
func NewMockLibvirtQemu(ctrl *gomock.Controller) *MockLibvirtQemu {
	mock := &MockLibvirtQemu{ctrl: ctrl}
	mock.recorder = &MockLibvirtQemuMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibvirtQemu) EXPECT() *MockLibvirtQemuMockRecorder {
	return m.recorder
}

// CloneAndResizeDisk mocks base method.
func (m *MockLibvirtQemu) CloneAndResizeDisk(baseImage, newDiskPath string, diskSizeGB int, shrink bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneAndResizeDisk", baseImage, newDiskPath, diskSizeGB, shrink)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneAndResizeDisk indicates an expected call of CloneAndResizeDisk.
func (mr *MockLibvirtQemuMockRecorder) CloneAndResizeDisk(baseImage, newDiskPath, diskSizeGB, shrink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneAndResizeDisk", reflect.TypeOf((*MockLibvirtQemu)(nil).CloneAndResizeDisk), baseImage, newDiskPath, diskSizeGB, shrink)
}

// Create mocks base method.
func (m *MockLibvirtQemu) Create(domain *libvirt.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLibvirtQemuMockRecorder) Create(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLibvirtQemu)(nil).Create), domain)
}

// Destroy mocks base method.
func (m *MockLibvirtQemu) Destroy(domain *libvirt.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockLibvirtQemuMockRecorder) Destroy(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockLibvirtQemu)(nil).Destroy), domain)
}

// DomainDefineXML mocks base method.
func (m *MockLibvirtQemu) DomainDefineXML(xmlConfig string) (*libvirt.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainDefineXML", xmlConfig)
	ret0, _ := ret[0].(*libvirt.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainDefineXML indicates an expected call of DomainDefineXML.
func (mr *MockLibvirtQemuMockRecorder) DomainDefineXML(xmlConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainDefineXML", reflect.TypeOf((*MockLibvirtQemu)(nil).DomainDefineXML), xmlConfig)
}

// GetName mocks base method.
func (m *MockLibvirtQemu) GetName(domain *libvirt.Domain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", domain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockLibvirtQemuMockRecorder) GetName(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockLibvirtQemu)(nil).GetName), domain)
}

// GetState mocks base method.
func (m *MockLibvirtQemu) GetState(domain *libvirt.Domain) (libvirt.DomainState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", domain)
	ret0, _ := ret[0].(libvirt.DomainState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockLibvirtQemuMockRecorder) GetState(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockLibvirtQemu)(nil).GetState), domain)
}

// LookupDomainByUUIDString mocks base method.
func (m *MockLibvirtQemu) LookupDomainByUUIDString(uuid string) (*libvirt.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupDomainByUUIDString", uuid)
	ret0, _ := ret[0].(*libvirt.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupDomainByUUIDString indicates an expected call of LookupDomainByUUIDString.
func (mr *MockLibvirtQemuMockRecorder) LookupDomainByUUIDString(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupDomainByUUIDString", reflect.TypeOf((*MockLibvirtQemu)(nil).LookupDomainByUUIDString), uuid)
}

// NewConnect mocks base method.
func (m *MockLibvirtQemu) NewConnect(uri string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnect", uri)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConnect indicates an expected call of NewConnect.
func (mr *MockLibvirtQemuMockRecorder) NewConnect(uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnect", reflect.TypeOf((*MockLibvirtQemu)(nil).NewConnect), uri)
}

// Shutdown mocks base method.
func (m *MockLibvirtQemu) Shutdown(domain *libvirt.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockLibvirtQemuMockRecorder) Shutdown(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockLibvirtQemu)(nil).Shutdown), domain)
}

// Undefine mocks base method.
func (m *MockLibvirtQemu) Undefine(domain *libvirt.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undefine", domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undefine indicates an expected call of Undefine.
func (mr *MockLibvirtQemuMockRecorder) Undefine(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undefine", reflect.TypeOf((*MockLibvirtQemu)(nil).Undefine), domain)
}
